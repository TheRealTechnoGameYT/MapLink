name: Build MapLink

# Déclenche le workflow sur push sur main ou via manuel
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Compilation MapLink
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code
      - name: Récupérer le code
        uses: actions/checkout@v4

      # Étape 2 : Installer Java 17
      - name: Configurer Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Étape 3 : Cacher le cache Gradle
      - name: Restaurer/Cacher Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties','**/*.gradle*','**/settings.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Étape 4 : Autoriser gradlew si présent
      - name: Autoriser l’exécution de gradlew
        run: chmod +x ./gradlew || true

      # Étape 5 : Build avec gradlew ou wrapper
      - name: Build Gradle (stacktrace complet)
        run: |
          set -euo pipefail

          # Vérifie si gradlew existe, sinon crée-le
          if [ -f "./gradlew" ]; then
            echo "Utilisation du gradlew du repo"
          else
            echo "gradlew absent, création du wrapper avec Gradle système"
            gradle wrapper --gradle-version 8.6 || true
            chmod +x ./gradlew
          fi

          # Build avec sortie complète pour debug
          ./gradlew clean build --no-daemon --stacktrace --info
        env:
          GRADLE_OPTS: -Dorg.gradle.jvmargs=-Xmx1g
